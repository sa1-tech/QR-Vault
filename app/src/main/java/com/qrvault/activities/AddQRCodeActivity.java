package com.qrvault.activities;

import android.graphics.Bitmap;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.WriterException;
import com.journeyapps.barcodescanner.BarcodeEncoder;
import com.qrvault.R;
import com.qrvault.database.QRDatabaseHelper;
import com.qrvault.models.QRCode;

public class AddQRCodeActivity extends AppCompatActivity {

	private EditText inputText, inputTitle;
	private ImageView qrPreview;
	private Button btnGenerate, btnSave;
	private Bitmap qrBitmap;
	private QRDatabaseHelper dbHelper;
	private QRCode qrToEdit = null;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_add_qrcode);

		inputText = findViewById(R.id.inputText);
		inputTitle = findViewById(R.id.inputTitle);
		qrPreview = findViewById(R.id.qrPreview);
		btnGenerate = findViewById(R.id.btnGenerate);
		btnSave = findViewById(R.id.btnSave);
		dbHelper = new QRDatabaseHelper(this);

		if (getIntent().hasExtra("qr")) {
			qrToEdit = (QRCode) getIntent().getSerializableExtra("qr");
			if (qrToEdit != null) {
				inputText.setText(qrToEdit.getContent());
				inputTitle.setText(qrToEdit.getTitle());
				btnSave.setText("Update QR");
			}
		}

		btnGenerate.setOnClickListener(v -> generateQRCode());
		btnSave.setOnClickListener(v -> {
			if (qrToEdit != null) updateQRCode();
			else saveQRCode();
		});
	}

	private void generateQRCode() {
		String text = inputText.getText().toString().trim();
		if (text.isEmpty()) {
			Toast.makeText(this, "Please enter content", Toast.LENGTH_SHORT).show();
			return;
		}

		try {
			BarcodeEncoder encoder = new BarcodeEncoder();
			qrBitmap = encoder.encodeBitmap(text, BarcodeFormat.QR_CODE, 500, 500);
			qrPreview.setImageBitmap(qrBitmap);
		} catch (WriterException e) {
			Toast.makeText(this, "Error generating QR", Toast.LENGTH_SHORT).show();
		}
	}

	private void saveQRCode() {
		if (qrBitmap == null) {
			Toast.makeText(this, "Generate QR first", Toast.LENGTH_SHORT).show();
			return;
		}

		String title = inputTitle.getText().toString().trim();
		String data = inputText.getText().toString().trim();

		QRCode qr = new QRCode(
				0, // id (autogenerated)
				title,
				data,
				"", // imagePath (optional)
				System.currentTimeMillis(),
				false, // isFavorite
				"Text", // type
				" " // tags
		);

		boolean inserted = dbHelper.insertQRCode(qr);
		Toast.makeText(this, inserted ? "QR Code Saved" : "Failed to save", Toast.LENGTH_SHORT).show();

		if (inserted) finish();
	}

	private void updateQRCode() {
		String title = inputTitle.getText().toString().trim();
		String data = inputText.getText().toString().trim();

		if (data.isEmpty()) {
			Toast.makeText(this, "Content can't be empty", Toast.LENGTH_SHORT).show();
			return;
		}

		qrToEdit.setTitle(title);
		qrToEdit.setContent(data);
		qrToEdit.setTimestamp(System.currentTimeMillis());

		boolean updated = dbHelper.updateQRCode(qrToEdit);
		Toast.makeText(this, updated ? "QR Updated" : "Update Failed", Toast.LENGTH_SHORT).show();

		if (updated) finish();
	}
}
